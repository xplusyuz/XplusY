{
  "chips": [
    {
      "id": "home",
      "icon": "svg/home.png",
      "html": "<!doctype html>\n<html lang=\"uz\">\n<head>\n  <meta charset=\"utf-8\"/>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/>\n  <title>LeaderMath — Banners Only (JSON-ready)</title>\n  <meta name=\"theme-color\" content=\"#000\"/>\n  <link rel=\"icon\" href=\"./logo.png\"/>\n  <style>\n    html,body{height:100%;margin:0;background:#000;overflow:hidden}\n    .stage{position:fixed;inset:0;background:#000}\n    .layer{position:absolute;inset:0;opacity:0;transition:opacity .35s ease;border:0;width:100%;height:100%}\n    .layer.show{opacity:1}\n    .tap{position:absolute;inset:0;display:grid;grid-template-columns:1fr 1fr;z-index:5}\n    .tap>div{height:100%}\n    .tap .left{cursor:w-resize}\n    .tap .right{cursor:e-resize}\n  </style>\n</head>\n<body>\n  <div class=\"stage\">\n    <!-- Double buffer iframes for smooth cross-fade -->\n    <iframe id=\"A\" class=\"layer show\" loading=\"eager\"\n      sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts\"\n      referrerpolicy=\"no-referrer\"></iframe>\n\n    <iframe id=\"B\" class=\"layer\"\n      sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts\"\n      referrerpolicy=\"no-referrer\"></iframe>\n\n    <!-- Invisible tap zones -->\n    <div class=\"tap\">\n      <div id=\"left\"  class=\"left\"  aria-label=\"prev\"></div>\n      <div id=\"right\" class=\"right\" aria-label=\"next\"></div>\n    </div>\n  </div>\n\n  <script>\n  /* ================== Settings ================== */\n  const DUR_MS = 5000;   // Autoplay duration per banner\n  const WRAP   = true;   // Loop from end to start\n\n  /* ================== State ================== */\n  let DATA = { sections: [] };\n  let playlist = [];     // Flattened list of banners with runtime props\n  let ptr = 0;           // Current index in playlist\n  let active = 'A';      // 'A' or 'B' iframe is visible\n  let timer = null, lastTick = 0, remaining = DUR_MS, paused = false;\n\n  const $ = (s)=>document.querySelector(s);\n  const A = $('#A'), B = $('#B');\n  const L = $('#left'), R = $('#right');\n\n  /* ================== Helpers ================== */\n  function wrapHtml(bn, sec, injectedData=null){\n    const bg = bn.bg || (sec?.darkish ? '#0f1814' : '#ffffff');\n    const baseCSS = `\n      <style>\n        *{box-sizing:border-box}\n        html,body{height:100%;margin:0;background:${bg};\n          font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif}\n        a{text-decoration:none}\n      </style>`;\n    // If srcdoc-injection is requested and data provided, expose it:\n    const injectScript = injectedData!=null\n      ? `<script>window.__BANNER_DATA__=${JSON.stringify(injectedData)};<\\/script>`\n      : '';\n    return baseCSS + injectScript + (bn.html || `<div style=\"display:grid;place-items:center;height:100%;color:#888\">Bo‘sh banner</div>`);\n  }\n\n  async function fetchMaybe(url){\n    const res = await fetch(url, {cache:'no-store'});\n    if(!res.ok) throw new Error('JSON yuklanmadi: '+url);\n    return res.json();\n  }\n\n  // Build flattened playlist and (optionally) preload JSON for inject/postMessage\n  async function buildPlaylist(){\n    const tasks = [];\n    playlist = [];\n\n    DATA.sections.forEach((sec, sI)=>{\n      (sec.banners||[]).forEach((bn, bI)=>{\n        const item = {\n          secIdx:sI, idx:bI, rawHtml:bn.html||'',\n          bg:bn.bg, link:bn.link, title:bn.title,\n          // JSON integration options from banner.json:\n          dataUrl: bn.dataUrl || null,         // where to get JSON\n          dataMode: bn.dataMode || 'self',     // 'self' | 'inject' | 'postMessage'\n          data: null,                           // fetched JSON cache (for inject/postMessage)\n          srcdoc: ''                            // final HTML we will put into iframe.srcdoc\n        };\n\n        // If we need to preload data for inject/postMessage, schedule it:\n        if(item.dataUrl && (item.dataMode==='inject' || item.dataMode==='postMessage')){\n          tasks.push(fetchMaybe(item.dataUrl).then(json=>{ item.data = json; }));\n        }\n        playlist.push(item);\n      });\n    });\n\n    // Wait for all preloads\n    if(tasks.length){ await Promise.allSettled(tasks); }\n\n    // Prepare srcdoc for each item (inject mode => include window.__BANNER_DATA__)\n    playlist.forEach(it=>{\n      const sec = DATA.sections[it.secIdx];\n      const injectData = (it.dataMode==='inject' && it.data!=null) ? it.data : null;\n      it.srcdoc = wrapHtml(\n        { html: it.rawHtml, bg: it.bg },\n        sec,\n        injectData\n      );\n    });\n  }\n\n  function renderTo(target, item){\n    // If we plan to postMessage, we must wait for 'load' to fire:\n    if(item.dataMode==='postMessage' && item.data!=null){\n      const handler = ()=>{ try{\n          target.contentWindow?.postMessage({type:'banner-data', data:item.data}, '*');\n        }catch(e){/* ignore */}\n      target.addEventListener('load', handler, {once:true});\n    }\n    target.srcdoc = item.srcdoc;\n  }\n\n  function show(idx, resetDur=false){\n    if(!playlist.length) return;\n    ptr = ((idx%playlist.length)+playlist.length)%playlist.length;\n    const item = playlist[ptr];\n\n    const nextLayer = (active==='A') ? B : A;\n    const curLayer  = (active==='A') ? A : B;\n\n    renderTo(nextLayer, item);\n    // cross-fade\n    nextLayer.classList.add('show');\n    curLayer.classList.remove('show');\n    active = (active==='A') ? 'B' : 'A';\n\n    // timer\n    remaining = resetDur ? DUR_MS : remaining;\n    clearTimeout(timer);\n    if(!paused){\n      lastTick = performance.now();\n      timer = setTimeout(()=> next(), remaining);\n    }\n  }\n\n  function next(){\n    if(!playlist.length) return;\n    const nx = ptr + 1;\n    if(nx >= playlist.length){ WRAP ? show(0, true) : null; }\n    else{ show(nx, true); }\n  }\n\n  function prev(){\n    if(!playlist.length) return;\n    const pv = ptr - 1;\n    if(pv < 0){ WRAP ? show(playlist.length-1, true) : null; }\n    else{ show(pv, true); }\n  }\n\n  function pause(){\n    if(paused) return; paused = true;\n    clearTimeout(timer);\n    const elapsed = performance.now() - lastTick;\n    remaining = Math.max(0, remaining - elapsed);\n  }\n  function resume(){\n    if(!paused) return; paused = false;\n    lastTick = performance.now();\n    timer = setTimeout(()=> next(), remaining);\n  }\n\n  // Controls\n  L.addEventListener('click', prev);  R.addEventListener('click', next);\n  ['left','right'].forEach(id=>{\n    const el = document.getElementById(id);\n    el.addEventListener('pointerdown', pause);\n    el.addEventListener('pointerup',   resume);\n    el.addEventListener('pointerleave',resume);\n  });\n\n  // Swipe\n  let sx=0, sy=0;\n  document.addEventListener('touchstart', e=>{\n    if(!e.touches[0]) return;\n    sx = e.touches[0].clientX; sy = e.touches[0].clientY; pause();\n  }, {passive:true});\n  document.addEventListener('touchend', e=>{\n    resume();\n    const t=e.changedTouches[0]; if(!t) return;\n    const dx=t.clientX-sx, dy=t.clientY-sy;\n    if(Math.abs(dx)>40 && Math.abs(dx)>Math.abs(dy)){ dx<0 ? next() : prev(); }\n  }, {passive:true});\n\n  // Keyboard\n  window.addEventListener('keydown', e=>{\n    if(e.key==='ArrowRight') next();\n    else if(e.key==='ArrowLeft') prev();\n    else if(e.code==='Space'){ paused?resume():pause(); e.preventDefault(); }\n  });\n\n  async function init(){\n    try{\n      const res = await fetch('./banner.json', {cache:'no-store'});\n      DATA = await res.json();\n      await buildPlaylist();\n\n      if(!playlist.length){\n        const msg = `<style>html,body{height:100%;margin:0;display:grid;place-items:center;background:#111;color:#fff;font-family:system-ui}</style>\n                     <div>banner.json bo‘sh</div>`;\n        A.srcdoc = msg; A.classList.add('show'); return;\n      }\n\n      // Prime first and second\n      A.srcdoc = playlist[0].srcdoc; A.classList.add('show'); active='A';\n      if(playlist[0].dataMode==='postMessage' && playlist[0].data!=null){\n        A.addEventListener('load', ()=> {\n          try{ A.contentWindow?.postMessage({type:'banner-data', data:playlist[0].data}, '*'); }catch(e){}\n        }, {once:true});\n      }\n      if(playlist[1]){ renderTo(B, playlist[1]); }\n\n      remaining = DUR_MS; lastTick = performance.now();\n      timer = setTimeout(()=> next(), remaining);\n    }catch(err){\n      const msg = `<style>html,body{height:100%;margin:0;display:grid;place-items:center;background:#111;color:#fff;font-family:system-ui}</style>\n                   <div>banner.json yuklanmadi</div>`;\n      A.srcdoc = msg; A.classList.add('show');\n    }\n  }\n  init();\n  </script>\n</body>\n</html>\n"
    }
  ]
}