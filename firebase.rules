
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function isAdmin() {
      return isSignedIn() && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin"
        || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.numericId == 100);
    }

    match /users/{uid} {
      allow read: if isSignedIn();
      // Create only own doc
      allow create: if isSignedIn() && request.auth.uid == uid;
      // Update: only self or admin
      allow update: if isSignedIn() && (request.auth.uid == uid || isAdmin()) && validUserUpdate();
      allow delete: if false;

      function validUserUpdate() {
        // Prevent changing numericId once set (except admin)
        let before = resource.data;
        let after = request.resource.data;
        return
          (before.numericId == after.numericId || isAdmin()) &&
          // Gems delta limited to Â±100 per update (except admin)
          (isAdmin() || (abs((after.gems ?? 0) - (before.gems ?? 0)) <= 100));
      }
    }

    match /counters/{doc} {
      allow read: if isSignedIn();
      allow write: if isSignedIn(); // Transaction-controlled in client
    }

    match /events/{id} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    match /eventJoins/{id} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
  }
}
