rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function isOwner(uid) { return isSignedIn() && request.auth.uid == uid; }
    function changedOnly(keys) { return request.resource.data.diff(resource.data).changedKeys().hasOnly(keys); }

    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId)
        && request.resource.data.keys().hasAll(['firstName','lastName','middleName','dob','address','phone','numericId','balance','gems','createdAt'])
        && request.resource.data.balance == 0
        && request.resource.data.gems == 0;
      allow update: if isOwner(userId)
        && changedOnly(['address','phone','updatedAt']);
    }

    match /products/{productId} { allow read: if true; allow write: if false; }

    match /meta/{docId} { allow read: if false; allow write: if false; }

    match /transactions/{txId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }

    match /attempts/{attemptId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }
  }
}
